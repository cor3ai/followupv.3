generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }

model Organization {
  id           String   @id @default(cuid())
  name         String
  ownerUserId  String
  vertical     String?
  settings     Json?
  sendCap      Int      @default(5000)
  users        User[]
  contacts     Contact[]
  messages     Message[]
  events       Event[]
  suppressions Suppression[]
  onboarding   OnboardingProgress?
  revenue      RevenueEvent[]
  subscription Subscription?
  emailEvents  EmailEvent[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model OnboardingProgress {
  id             String   @id @default(cuid())
  organizationId String   @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  billing        Boolean  @default(false)
  domainAuth     Boolean  @default(false)
  importContacts Boolean  @default(false)
  firstSend      Boolean  @default(false)
  scheduleReeng  Boolean  @default(false)
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  role           String   @default("owner")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Contact {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  email          String
  name           String?
  lastInteractionAt DateTime?
  lastMessageAt  DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId])
  @@unique([organizationId, email])
}

model Event {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  contactId      String?
  contact        Contact? @relation(fields: [contactId], references: [id])
  type           String
  payload        Json?
  occurredAt     DateTime  @default(now())
  createdAt      DateTime  @default(now())
  @@index([organizationId, occurredAt])
}

model Message {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  contactId      String
  contact        Contact   @relation(fields: [contactId], references: [id])
  kind           String
  status         String    @default("draft")
  subject        String?
  body           String
  scheduledFor   DateTime?
  sentAt         DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  metadata       Json?

  @@index([organizationId, status, scheduledFor])
}

model Suppression {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  email          String
  reason         String?
  createdAt      DateTime @default(now())

  @@unique([organizationId, email])
  @@index([organizationId, email])
}

model RevenueEvent {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  contactId      String?
  contact        Contact? @relation(fields: [contactId], references: [id])
  messageId      String?
  amountCents    Int
  currency       String  @default("USD")
  couponCode     String?
  source         String?
  occurredAt     DateTime @default(now())
  createdAt      DateTime @default(now())

  @@index([organizationId, occurredAt])
  @@index([organizationId, couponCode])
}

model Subscription {
  id                   String  @id @default(cuid())
  organizationId       String  @unique
  organization         Organization @relation(fields: [organizationId], references: [id])
  stripeCustomerId     String
  stripeSubscriptionId String
  status               String
  currentPeriodEnd     DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model EmailEvent {
  id             String   @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  messageId      String?
  message        Message? @relation(fields: [messageId], references: [id])
  contactId      String?
  contact        Contact? @relation(fields: [contactId], references: [id])
  type           String
  provider       String?
  email          String?
  payload        Json?
  occurredAt     DateTime @default(now())
  createdAt      DateTime @default(now())
  @@index([organizationId, occurredAt])
  @@index([organizationId, type])
}

model SignupToken {
  id          String   @id @default(cuid())
  code        String   @unique
  label       String?
  defaultVertical String?
  maxUses     Int      @default(1)
  usedCount   Int      @default(0)
  active      Boolean  @default(true)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
}

