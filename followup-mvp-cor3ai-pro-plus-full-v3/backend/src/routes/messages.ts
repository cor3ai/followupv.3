import { Router } from 'express'; import { prisma } from '../prisma/client.js'; import { requireAuth, AuthRequest } from '../middleware/auth.js'; import { generateMessage } from '../services/ai.js'; import { sendEmail } from '../services/email.js'; import { sign } from '../utils/signer.js'; export const router=Router(); router.use(requireAuth); function monthWindow(){const now=new Date(); const start=new Date(Date.UTC(now.getUTCFullYear(),now.getUTCMonth(),1,0,0,0)); const end=new Date(Date.UTC(now.getUTCFullYear(),now.getUTCMonth()+1,1,0,0,0)); return {start,end}} router.get('/today',async(req:AuthRequest,res)=>{const messages=await prisma.message.findMany({where:{organizationId:req!.user!.orgId,OR:[{status:'draft'},{status:'queued',scheduledFor:{lte:new Date()}}]},include:{contact:true},orderBy:{createdAt:'desc'}}); res.json(messages)}); router.post('/generate',async(req:AuthRequest,res)=>{const {contactId,kind,offer,context}=req.body||{}; const contact=await prisma.contact.findUnique({where:{id:contactId}}); if(!contact?.email) return res.status(404).json({error:'contact not found'}); const org=await prisma.organization.findUnique({where:{id:req!.user!.orgId}}); const ai=await generateMessage({kind,businessName:org!.name,vertical:org!.vertical||undefined,contact:{name:contact.name||undefined,email:contact.email},context,offer}); const msg=await prisma.message.create({data:{organizationId:req!.user!.orgId,contactId,kind,status:'draft',subject:ai.subject||null,body:ai.body}}); res.json(msg)}); router.post('/:id/approve-send',async(req:AuthRequest,res)=>{const id=req.params.id; const org=await prisma.organization.findUnique({where:{id:req!.user!.orgId}}); const {start,end}=monthWindow(); const sent=await prisma.message.count({where:{organizationId:req!.user!.orgId,status:'sent',sentAt:{gte:start,lt:end}}}); if(sent>=(org?.sendCap||5000)) return res.status(429).json({error:'monthly send cap reached'}); const msg=await prisma.message.findFirst({where:{id,organizationId:req!.user!.orgId},include:{contact:true}}); if(!msg) return res.status(404).json({error:'not found'}); try{const sup=await prisma.suppression.findFirst({where:{organizationId:req!.user!.orgId,email:msg.contact.email!}}); if(sup) throw new Error('suppressed recipient'); const orgId=req!.user!.orgId; const unsubSig=sign(orgId,msg.contact.email!); const unsubUrl=`${process.env.APP_URL}/u?org=${encodeURIComponent(orgId)}&email=${encodeURIComponent(msg.contact.email!)}&sig=${unsubSig}`; const html=`<div>${msg.body.replace(/\n/g,'<br/>')}</div><hr/><p style="font-size:12px;color:#666">Donâ€™t want emails from us? <a href="${unsubUrl}">Unsubscribe</a>.</p>`; await sendEmail({to:msg.contact.email!,subject:msg.subject||'A quick note from FollowUp',html}); const updated=await prisma.message.update({where:{id:msg.id},data:{status:'sent',sentAt:new Date()}}); await prisma.onboardingProgress.update({where:{organizationId:req!.user!.orgId},data:{firstSend:true}}).catch(()=>{}); res.json(updated)}catch(e:any){const updated=await prisma.message.update({where:{id:msg.id},data:{status:'failed',metadata:{error:e.message}}}); res.status(400).json(updated)}})
