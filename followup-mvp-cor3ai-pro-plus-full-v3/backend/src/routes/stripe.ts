import express from 'express'; import { Router } from 'express'; import Stripe from 'stripe'; import { prisma } from '../prisma/client.js'; import { sendEmail } from '../services/email.js'; import jwt from 'jsonwebtoken'; export const router=Router(); const stripe=new Stripe(process.env.STRIPE_SECRET_KEY as string,{apiVersion:'2023-10-16'}); router.post('/webhook',express.raw({type:'application/json'}) as any, async (req,res)=>{const sig=req.headers['stripe-signature'] as string; let event:Stripe.Event; try{event=stripe.webhooks.constructEvent(req.body,sig,process.env.STRIPE_WEBHOOK_SECRET as string)}catch(err:any){return res.status(400).send(`Webhook Error: ${err.message}`)} if(event.type==='checkout.session.completed'){const s=event.data.object as Stripe.Checkout.Session; const email=s.customer_details?.email?.toLowerCase(); if(email){let user=await prisma.user.findUnique({where:{email}}); if(!user){const org=await prisma.organization.create({data:{name:email.split('@')[0],ownerUserId:'temp'}}); user=await prisma.user.create({data:{email,organizationId:org.id,role:'owner'}}); await prisma.organization.update({where:{id:org.id},data:{ownerUserId:user.id}}); await prisma.onboardingProgress.create({data:{organizationId:org.id,billing:true}})} else {await prisma.onboardingProgress.update({where:{organizationId:user.organizationId},data:{billing:true}}).catch(()=>{})} const token=jwt.sign({userId:user.id,orgId:user.organizationId},process.env.JWT_SECRET as string,{expiresIn:'1d'}); const url=`${process.env.APP_URL}/app/#token=${token}`; await sendEmail({to:email,subject:'Welcome to FollowUp â€” access your dashboard',html:`<p>You're in! Open your dashboard: <a href="${url}">${url}</a></p>`})}} if(event.type.startsWith('customer.subscription.')){const sub=event.data.object as Stripe.Subscription; const customer=await stripe.customers.retrieve(sub.customer as string) as Stripe.Customer; const email=(customer.email||'').toLowerCase(); const user=await prisma.user.findUnique({where:{email}}); if(user){await prisma.subscription.upsert({where:{organizationId:user.organizationId},update:{stripeCustomerId:sub.customer as string,stripeSubscriptionId:sub.id,status:sub.status,currentPeriodEnd:new Date(sub.current_period_end*1000)},create:{organizationId:user.organizationId,stripeCustomerId:sub.customer as string,stripeSubscriptionId:sub.id,status:sub.status,currentPeriodEnd:new Date(sub.current_period_end*1000)}})}} res.json({received:true})})
