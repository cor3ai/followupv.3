import { Router } from 'express'; import { prisma } from '../prisma/client.js'; import { requireAuth, AuthRequest } from '../middleware/auth.js'; export const router=Router(); router.use(requireAuth); router.get('/',async(req:AuthRequest,res)=>{const contacts=await prisma.contact.findMany({where:{organizationId:req!.user!.orgId}}); res.json(contacts)}); router.post('/',async(req:AuthRequest,res)=>{const {email,name}=req.body||{}; if(!email) return res.status(400).json({error:'email required'}); try{const c=await prisma.contact.create({data:{organizationId:req!.user!.orgId,email:email.toLowerCase(),name:name||null}}); await prisma.onboardingProgress.update({where:{organizationId:req!.user!.orgId},data:{importContacts:true}}).catch(()=>{}); res.json(c)}catch{const ex=await prisma.contact.findFirst({where:{organizationId:req!.user!.orgId,email:email.toLowerCase()}}); if(ex) return res.status(200).json(ex); return res.status(400).json({error:'unable to create contact'})}}); router.post('/import',async(req:AuthRequest,res)=>{const items=(req.body?.contacts||[]) as Array<{email?:string,name?:string}>; if(!Array.isArray(items)||!items.length) return res.status(400).json({error:'contacts array required'}); let created=0, skipped=0; for(const it of items){const email=(it.email||'').trim().toLowerCase(); if(!email){skipped++;continue} const exists=await prisma.contact.findFirst({where:{organizationId:req!.user!.orgId,email}}); if(exists){skipped++;continue} await prisma.contact.create({data:{organizationId:req!.user!.orgId,email,name:(it.name||'').trim()||null}}); created++} await prisma.onboardingProgress.update({where:{organizationId:req!.user!.orgId},data:{importContacts:true}}).catch(()=>{}); res.json({ok:true,created,skipped,total:items.length})})
